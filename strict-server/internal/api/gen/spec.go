// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW3W7bPAx9FYPfd+nETtoBhYEBW39WdBfb0KHYRZAL1mYSFbakSXTQIPC7D5KcOH/b",
	"CqzL2qu6pshD8pwjZwm5qrSSJNlCtgSbz6hC/3hljDK3ZOuS3b/aKE2GBflgrgpyf3mhCTKwbIScQhND",
	"Rdbi9HDMMnJtL7ZThWSakoGmicHQ91oYKiAbbR6OA1xXfBwDCy5d+maX8aqmun+gnB3knSWz3/1EGMuf",
	"sPJ90CNW2tf6qGayK9L2HcNjT6EWPdfDlGSPHtlgj3HqS82xFAWyS1h370Yp8RDCpaLnAqgtmasKRbmN",
	"8KBmsl8oelctXLCfq+oPEMkDNLvcdPvbGHSzpfFPqPgmeHZTOBAsy88TyEa71Ihia55BDBNlKmTIoBaS",
	"T4bdNCvlPH2cKdPbdH8cURxqeAn/G5pABv8lnUeS1iCJF1Yz9rWEnKhgCsmYO7c0MRRkcyM0CyUhg/df",
	"bnof3NYilxh9JTMXuddCq2P3ute9npOxIXPQT932lCaJWkAGJ/20P4AYNPLMD5i4vfsnraz36jb2hSFk",
	"8sDgCxl0EcdDG2tDbidk+VwVi9U4JH1B1LoUuU9LHqyruroq3NPv99Su3GolbeB5mA6eFaNVlgfaHt8v",
	"PPdzFm6Tp8PhsyFv3j6HoKU2KneX1n1J0UWL6M7ZuqrQLDp2MHIsRq36YgjqHUHgduxyAs/JUhRNILkk",
	"pn26L/37CIPS7heRKPZoD2da2jUarIi9hkZLEK6IExfEIP0NBr5C5xg2NcUbG/rbbh3vaed0f2w/bdhJ",
	"oDlNj0XzORbRbfDODrlrLjbIXVOyS3EMUzpg32viX5N5Tfx6mUyPeQsYYiNo/oIEEsh9mjp0fUAdd7rA",
	"tdv3pBGir0odx/wEHVV8mOek//Hl9BK+fjG8Od70N5LJSCz9Ly4ykT++48G1hZ5iQ5/qawUX1aaEDGbM",
	"OkuSUuVYzpTl7Cw9S5P5AJym2xLLlctCqWbc/AgAAP//t7auKn0NAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
